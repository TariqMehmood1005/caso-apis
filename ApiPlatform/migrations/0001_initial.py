# Generated by Django 5.1.1 on 2025-02-19 10:40

import ApiPlatform.models
import datetime
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdminReply',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message_content', models.CharField(max_length=100)),
                ('helpful_counter', models.IntegerField(default=0)),
                ('is_yes', models.BooleanField(default=False)),
                ('reply_posted_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Admin Replies',
                'ordering': ['reply_posted_at'],
            },
        ),
        migrations.CreateModel(
            name='BannedIP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(unique=True)),
                ('ban_expiry', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('country', models.CharField(choices=[('United States', 'United States'), ('United Kingdom', 'United Kingdom'), ('Canada', 'Canada')], default='US', max_length=50, unique=True)),
                ('country_created_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Countries',
                'ordering': ['country_created_at'],
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('level', models.CharField(blank=True, choices=[('Level 0', 'Level 0'), ('Level 1', 'Level 1'), ('Level 2', 'Level 2'), ('Level 3', 'Level 3'), ('Level 4', 'Level 4')], max_length=50, null=True, unique=True)),
                ('level_code', models.CharField(blank=True, choices=[('L0', 'L0'), ('L1', 'L1'), ('L2', 'L2'), ('L3', 'L3'), ('L4', 'L4')], max_length=50, null=True, unique=True)),
                ('redemption_score_on_level', models.IntegerField(blank=True, choices=[(100, 100), (200, 200), (500, 500), (800, 800), (5000, 5000)], default=0, null=True)),
                ('level_created_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Levels',
                'ordering': ['level_created_at'],
            },
        ),
        migrations.CreateModel(
            name='OTPVerification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('otp', models.CharField(max_length=6)),
                ('otp_created_at', models.DateTimeField(auto_now_add=True)),
                ('expire_at', models.DateTimeField(blank=True, null=True)),
                ('verification_type', models.CharField(choices=[('OTP', 'OTP'), ('password_reset', 'Password Reset')], default='OTP', max_length=20)),
            ],
            options={
                'verbose_name_plural': 'OTP Verifications',
                'ordering': ['otp_created_at'],
            },
        ),
        migrations.CreateModel(
            name='Prize',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('prize_id', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=100)),
                ('quantity', models.IntegerField()),
                ('image', models.ImageField(blank=True, default=None, null=True, upload_to='prizes/')),
                ('probability', models.FloatField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Prizes',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('roles', models.CharField(choices=[('User', 'User'), ('Agent', 'Agent'), ('Admin', 'Admin')], default='User', max_length=50)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('role_created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Roles',
                'ordering': ['role_created_at'],
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pro_status', models.CharField(choices=[('Free', 'Free'), ('Premium', 'Premium (Pro)'), ('Elite', 'Elite')], default='Free', max_length=50)),
                ('redemption_on_free_subscription', models.IntegerField(blank=True, choices=[(0, 0), (50, 50), (100, 100)], default=None, null=True)),
                ('subscription_plan_amount', models.PositiveIntegerField(default=0)),
                ('subscription_plan_created_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Subscription Plans',
                'ordering': ['subscription_plan_created_at'],
            },
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('current_balance', models.IntegerField(default=0)),
                ('total_amount', models.IntegerField(default=0)),
                ('order_id', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('withdrawal_percentage_tax', models.IntegerField(default=0)),
                ('last_transaction_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Wallets',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='WalletTransactionHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('payment_method', models.CharField(max_length=50)),
                ('payment_status', models.CharField(choices=[('Pending', 'Pending'), ('Cancelled', 'Cancelled'), ('Approved', 'Approved')], default='Pending', max_length=10)),
                ('transaction_amount', models.IntegerField()),
                ('transaction_date', models.DateTimeField(auto_now=True)),
                ('payment', models.CharField(blank=True, choices=[('Debit', 'Debit'), ('Credit', 'Credit'), ('Card', 'Card'), ('Crypto', 'Crypto')], default=None, max_length=10, null=True)),
                ('order_id', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('withdrawal_percentage_tax', models.IntegerField(default=0)),
                ('is_crypto_payment', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'Wallet Transaction Histories',
                'ordering': ['transaction_date'],
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('game_id', models.CharField(max_length=100, null=True, unique=True)),
                ('game_name', models.CharField(max_length=255)),
                ('game_description', models.TextField()),
                ('game_image', models.ImageField(default='default-game.jpg', max_length=255, null=True, upload_to='game_images/')),
                ('game_video', models.FileField(default=None, max_length=255, null=True, upload_to='game_videos/')),
                ('game_price', models.IntegerField()),
                ('android_game_url', models.CharField(max_length=255, null=True)),
                ('ios_game_url', models.CharField(max_length=255, null=True)),
                ('browser_game_url', models.CharField(max_length=255, null=True)),
                ('upcoming_status', models.BooleanField(default=False)),
                ('is_trending', models.BooleanField(default=False)),
                ('game_created_at', models.DateTimeField(auto_now_add=True)),
                ('game_updated_at', models.DateTimeField(auto_now_add=True)),
                ('score', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('transfer_score_percentage', models.IntegerField(default=0)),
                ('redeem_score_percentage', models.IntegerField(default=0)),
                ('free_scores', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('is_free', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('is_notified_read', models.BooleanField(default=False)),
                ('gradient_style', models.CharField(blank=True, default='#000000', max_length=255, null=True)),
                ('country', models.ManyToManyField(blank=True, null=True, related_name='games', to='ApiPlatform.country')),
            ],
            options={
                'verbose_name_plural': 'Games',
                'ordering': ['game_created_at'],
            },
        ),
        migrations.CreateModel(
            name='GameReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message_content', models.CharField(max_length=100)),
                ('ratings', models.DecimalField(decimal_places=1, default=0, max_digits=2)),
                ('helpful_counter', models.IntegerField(default=0)),
                ('review_posted_at', models.DateTimeField(auto_now_add=True)),
                ('admin_replies_id', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ApiPlatform.adminreply')),
                ('game_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='game_reviews', to='ApiPlatform.game')),
            ],
            options={
                'verbose_name_plural': 'Game Reviews',
                'ordering': ['review_posted_at'],
            },
        ),
        migrations.AddField(
            model_name='game',
            name='game_reviews_id',
            field=models.ManyToManyField(blank=True, related_name='games', to='ApiPlatform.gamereview'),
        ),
        migrations.AddField(
            model_name='adminreply',
            name='game_review_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='admin_replies', to='ApiPlatform.gamereview'),
        ),
        migrations.CreateModel(
            name='GameTransactionHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('payment', models.CharField(choices=[('debit', 'Debit'), ('credit', 'Credit')], default='debit', max_length=10)),
                ('transaction_amount', models.IntegerField()),
                ('transaction_date', models.DateTimeField(auto_now_add=True)),
                ('order_id', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('withdrawal_percentage_tax', models.IntegerField(default=0)),
                ('game_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transaction_history', to='ApiPlatform.game')),
            ],
            options={
                'verbose_name_plural': 'Game Transaction History',
                'ordering': ['transaction_date'],
            },
        ),
        migrations.CreateModel(
            name='ReviewHelpFull',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_liked', models.BooleanField(default=False)),
                ('review_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='review_help_full', to='ApiPlatform.gamereview')),
            ],
            options={
                'verbose_name_plural': 'Review Help Full',
                'ordering': ['is_liked'],
            },
        ),
        migrations.AddField(
            model_name='gamereview',
            name='review_help_full_id',
            field=models.ManyToManyField(blank=True, related_name='game_reviews', to='ApiPlatform.reviewhelpfull'),
        ),
        migrations.CreateModel(
            name='ReviewNotHelpFull',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_liked', models.BooleanField(default=False)),
                ('review_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='review_not_help_full', to='ApiPlatform.gamereview')),
            ],
            options={
                'verbose_name_plural': 'Review Not Help Full',
                'ordering': ['is_liked'],
            },
        ),
        migrations.AddField(
            model_name='gamereview',
            name='review_not_help_full_id',
            field=models.ManyToManyField(blank=True, related_name='game_reviews', to='ApiPlatform.reviewnothelpfull'),
        ),
        migrations.CreateModel(
            name='SpinHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('prize_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spin_histories', to='ApiPlatform.prize')),
            ],
            options={
                'verbose_name_plural': 'Spin Histories',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Spin',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('last_spin_checked', models.DateTimeField(blank=True, null=True)),
                ('prizes_id', models.ManyToManyField(related_name='spins', to='ApiPlatform.prize')),
                ('spin_history_id', models.ManyToManyField(related_name='spin_histories', to='ApiPlatform.spinhistory')),
            ],
            options={
                'verbose_name_plural': 'Spins',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('driving_license_front_image', models.ImageField(blank=True, default=None, null=True, upload_to='user_profiles/license/')),
                ('driving_license_back_image', models.ImageField(blank=True, default=None, null=True, upload_to='user_profiles/license/')),
                ('is_verified_license', models.BooleanField(default=False)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], default='M', max_length=1)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('waiting_list', models.BooleanField(default=False)),
                ('experience_points', models.FloatField(blank=True, default=0, help_text='Total experience points of the user. Used for level up.', null=True)),
                ('profile_image', models.ImageField(blank=True, default='default-user.jpg', null=True, upload_to='user_profiles/')),
                ('banner_image', models.ImageField(blank=True, default='default-banner.jpg', null=True, upload_to='user_profiles/banners/')),
                ('front_images', models.ImageField(blank=True, default=None, null=True, upload_to='user_profiles/documents/')),
                ('back_images', models.ImageField(blank=True, default=None, null=True, upload_to='user_profiles/documents/')),
                ('selected_documents', models.CharField(blank=True, choices=[('driving_license', 'Driving License'), ('passport', 'Passport'), ('id_card', 'ID Card')], default=None, max_length=20, null=True)),
                ('referral', models.BooleanField(default=False)),
                ('referral_key', models.CharField(blank=True, max_length=100, null=True)),
                ('profile_created_at', models.DateTimeField(auto_now_add=True)),
                ('profile_updated_at', models.DateTimeField(auto_now=True)),
                ('is_banned_from_global_chat', models.BooleanField(default=False)),
                ('is_banned_from_agent_chat', models.BooleanField(default=False)),
                ('phone', models.PositiveIntegerField(blank=True, max_length=20, null=True)),
                ('is_phone_verified', models.BooleanField(default=False)),
                ('last_active', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_login', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_last_active', models.BooleanField(default=False)),
                ('failed_attempts', models.IntegerField(default=0)),
                ('locked_until', models.DateTimeField(blank=True, null=True)),
                ('country_id', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_countries', to='ApiPlatform.country')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_users', to='ApiPlatform.user')),
                ('otp_verification_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_otp_verifications', to='ApiPlatform.otpverification')),
                ('role_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_roles', to='ApiPlatform.role')),
                ('spin_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_spins', to='ApiPlatform.spin')),
                ('subscription_plan', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users_subscription_plan', to='ApiPlatform.subscriptionplan')),
                ('user_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='custom_user', to=settings.AUTH_USER_MODEL)),
                ('user_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_levels', to='ApiPlatform.level')),
                ('wallet_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_wallets', to='ApiPlatform.wallet')),
            ],
            options={
                'verbose_name_plural': 'Users',
                'ordering': ['profile_created_at'],
            },
        ),
        migrations.AddField(
            model_name='reviewnothelpfull',
            name='user_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='review_not_help_full', to='ApiPlatform.user'),
        ),
        migrations.AddField(
            model_name='reviewhelpfull',
            name='user_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='review_help_full', to='ApiPlatform.user'),
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('referral_key', models.CharField(max_length=255, unique=True)),
                ('quantity', models.IntegerField()),
                ('referral_created_at', models.DateTimeField(auto_now_add=True)),
                ('referral_expiry_date', models.DateField(blank=True, default=datetime.date(2025, 4, 20), null=True)),
                ('receiver_user_id', models.ManyToManyField(blank=True, related_name='received_referrals', to='ApiPlatform.user')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referrals', to='ApiPlatform.user')),
            ],
            options={
                'verbose_name_plural': 'Referrals',
                'ordering': ['referral_created_at'],
            },
        ),
        migrations.CreateModel(
            name='PromoCode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('promo_code', models.CharField(max_length=50, unique=True)),
                ('bonus_percentage', models.IntegerField(default=0)),
                ('promo_code_created_at', models.DateTimeField(auto_now_add=True)),
                ('is_expired', models.BooleanField(default=False)),
                ('receiver_user_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='received_promo_codes', to='ApiPlatform.user')),
                ('sender_user_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sent_promo_codes', to='ApiPlatform.user')),
            ],
            options={
                'verbose_name_plural': 'Promo Codes',
                'ordering': ['promo_code_created_at'],
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=255)),
                ('nick_name', models.CharField(max_length=255)),
                ('password', models.CharField(max_length=255)),
                ('score', models.FloatField(blank=True, default=0, null=True)),
                ('free_scores', models.FloatField(blank=True, default=0, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=10)),
                ('is_banned', models.BooleanField(default=False)),
                ('account_created_at', models.DateTimeField(auto_now_add=True)),
                ('account_updated_at', models.DateTimeField(auto_now=True)),
                ('is_notified_read', models.BooleanField(default=False)),
                ('game_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='ApiPlatform.game')),
                ('game_transaction_history_id', models.ManyToManyField(blank=True, related_name='players', to='ApiPlatform.gametransactionhistory')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_players', to='ApiPlatform.user')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='ApiPlatform.user')),
            ],
            options={
                'verbose_name_plural': 'Players',
                'ordering': ['account_created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message', models.TextField()),
                ('notification_type', models.CharField(max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='ApiPlatform.user')),
            ],
            options={
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MessageConversation',
            fields=[
                ('conversation_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('last_message_at', models.DateTimeField(auto_now=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agent_conversations', to='ApiPlatform.user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_conversations', to='ApiPlatform.user')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('message_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message_content', models.TextField()),
                ('status', models.CharField(choices=[('sent', 'Sent'), ('read', 'Read'), ('pending', 'Pending')], default='sent', max_length=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('message_type', models.CharField(choices=[('text', 'Text'), ('image', 'Image'), ('file', 'File')], default='text', max_length=10)),
                ('is_send_by_agent', models.BooleanField(default=False)),
                ('is_seen', models.BooleanField(default=False)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to='ApiPlatform.user')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to='ApiPlatform.user')),
            ],
            options={
                'verbose_name_plural': 'Messages',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='GlobalChat',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message_content', models.TextField()),
                ('global_chat_created_at', models.DateTimeField(auto_now_add=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='global_chats', to='ApiPlatform.user')),
            ],
            options={
                'verbose_name_plural': 'Global Chats',
                'ordering': ['global_chat_created_at'],
            },
        ),
        migrations.AddField(
            model_name='gamereview',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_reviews', to='ApiPlatform.user'),
        ),
        migrations.CreateModel(
            name='GameRating',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rating', models.DecimalField(decimal_places=1, default=0, max_digits=3)),
                ('total_ratings', models.IntegerField(default=0)),
                ('game_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_ratings', to='ApiPlatform.game')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_ratings', to='ApiPlatform.user')),
            ],
            options={
                'verbose_name_plural': 'Game Ratings',
                'ordering': ['rating'],
            },
        ),
        migrations.AddField(
            model_name='game',
            name='created_by_user_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='games', to='ApiPlatform.user'),
        ),
        migrations.CreateModel(
            name='FreePlay',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('free_plays', models.PositiveIntegerField(default=0)),
                ('spins_left', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='free_plays', to='ApiPlatform.user')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AgentChat',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message_content', models.TextField()),
                ('attachment_image', models.ImageField(blank=True, default=None, null=True, upload_to=ApiPlatform.models.upload_to_agent_user_chats)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=10)),
                ('is_agent_send', models.BooleanField(default=False)),
                ('agent_chat_created_at', models.DateTimeField(auto_now_add=True)),
                ('agent_id', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agent_agent_chats', to='ApiPlatform.user')),
                ('user_id', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_agent_chats', to='ApiPlatform.user')),
            ],
            options={
                'verbose_name_plural': 'Agent Chats',
                'ordering': ['agent_chat_created_at'],
            },
        ),
        migrations.AddField(
            model_name='adminreply',
            name='admin_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='admin_replies', to='ApiPlatform.user'),
        ),
        migrations.AddField(
            model_name='adminreply',
            name='rated_by_user_id',
            field=models.ManyToManyField(blank=True, null=True, related_name='rated_admin_replies', to='ApiPlatform.user'),
        ),
        migrations.AddField(
            model_name='wallet',
            name='wallet_transaction_history_id',
            field=models.ManyToManyField(related_name='wallets', to='ApiPlatform.wallettransactionhistory'),
        ),
        migrations.CreateModel(
            name='GameReviewRating',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rating', models.DecimalField(decimal_places=1, default=0, max_digits=2)),
                ('is_yes', models.BooleanField(default=False)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings_data', to='ApiPlatform.gamereview')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ApiPlatform.user')),
            ],
            options={
                'unique_together': {('user', 'review')},
            },
        ),
    ]
